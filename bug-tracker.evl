/*
- The textual description of an issue must be at least 10 characters long
*/

context Issue {
	constraint UniqueID {
		check: not Issue.all().excluding(self).collect(i|i.issueID).includes(self.issueID)
		message: self.issueID + " is not unique"
	}
	constraint NoBlockingCycles {
		check: not self.closure(issue | issue.blockedIssues).includes(self)
		message: self.issueID + " blocks itself"
	}
	constraint DuplicateOfSelf {
		check: not self.duplicates.includes(self)
		message: self.issueID + " duplicates itself"
	}
	constraint NoOpenBlockers {
		guard: not self.isOpen
		check: not Issue.all().select(i|i.blockedIssues.includes(self)).collect(i|i.isOpen).includes(true)
		message: self.issueID + "is closed, but has open blockers: " + Issue.all().select(i|i.blockedIssues.includes(self)).select(i|i.isOpen).collect(i|i.issueID)
	}
	constraint DescriptionLength {
		check: not self.description.length < 10
		message: "The description for" + self.issueID + " is too short"
	}
}

operation hey(s) {
	s.println();
	Issue.all().select(i|i.blockedIssues.includes(s)).collect(i|i.isOpen).println();
	//Issue.all().select(i|i.blockedIssues.includes(self)).collect(i|i.isOpen).includes(true);
	return true;
}



