// TODO: add versions, people, comments

pre {
  "start transformations".println();
}

rule TransformProducts 
  transform sourceProd : source!Product
  to targetProd : 
  	tget!Product { 
  		guard : not sourceProd.issue.forAll(i|not i.isOpen)
  		
  		"".println("transforming product: ", sourceProd.name);
	  	targetProd.name = sourceProd.name;
	 	targetProd.issue.addAll(sourceProd.issue.select(i|i.isOpen).equivalent()); 		
	}
	

rule TransformBugs 
  transform sourceBug : source!Bug
  to targetBug : 
  	tget!Bug {
		guard : sourceBug.isOpen

		"".println("  copying bug: ", sourceBug.issueID);
		
		targetBug.issueID = sourceBug.issueID;
		targetBug.title = sourceBug.title;
		targetBug.isOpen = sourceBug.isOpen;
		targetBug.duplicates = sourceBug.duplicates;
		targetBug.versions = sourceBug.versions;
		targetBug.reportedBy = sourceBug.reportedBy;
		targetBug.fixers = sourceBug.fixers; 		 		 		

		targetBug.blockedIssues = sourceBug.blockedIssues; 		 		 		 		
	}

rule TransformEnhancements 
  transform sourceEnh : source!Enhancement
  to targetEnh : 
  	tget!Enhancement {
		guard : sourceEnh.isOpen
		
		"".println("  transforming enhancement: ", sourceEnh.issueID);
	  		
	  	targetEnh.issueID = targetEnh.issueID;
	 	targetEnh.title = targetEnh.title;
	  	targetEnh.isOpen = targetEnh.isOpen;
	 	targetEnh.duplicates = targetEnh.duplicates;
	 	targetEnh.versions = targetEnh.versions;
	 	targetEnh.reportedBy = targetEnh.reportedBy;
	 	targetEnh.fixers = targetEnh.fixers; 		 		 		
	
	 	targetEnh.blockedIssues = sourceEnh.blockedIssues; 		 		 		 		
	}

post {
	var root : new tget!BugTracker;
	root.product.addAll(tget!Product.all);
	"finish transformation".println();
}

